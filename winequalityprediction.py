# -*- coding: utf-8 -*-
"""WineQualityPrediction_Group-9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HlpImaGB4lyU8T1AS-UifU2lFf9G6O4u

# Linear Regression Model on WineQualityTest DataSet

Importing Libraries
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from sklearn.metrics import accuracy_score

import matplotlib.pyplot as plt
from scipy import stats

import seaborn as sns

import statsmodels.api as sm
from statsmodels.stats import diagnostic as diag
from statsmodels.stats.outliers_influence import variance_inflation_factor

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

wines_df = pd.read_csv('/content/WineQT.csv')

"""Cleaning the Data

"""

wines_df.isnull().sum()

wines_df.duplicated()

wines_df=wines_df.drop_duplicates()
wines_df.duplicated()

f, ax = plt.subplots(11, figsize=(20,40))
sns.regplot(x='fixed acidity', y='quality', data=wines_df, color='b', ax=ax[0]);
sns.regplot(x='volatile acidity', y='quality', data=wines_df, color='r', ax=ax[1]);
sns.regplot(x='citric acid', y='quality', data=wines_df, color='g', ax=ax[2]);
sns.regplot(x='residual sugar', y='quality', data=wines_df, color='b', ax=ax[3]);
sns.regplot(x='chlorides', y='quality', data=wines_df, color='r', ax=ax[4]);
sns.regplot(x='free sulfur dioxide', y='quality', data=wines_df, color='g', ax=ax[5]);
sns.regplot(x='total sulfur dioxide', y='quality', data=wines_df, color='b', ax=ax[6]);
sns.regplot(x='density', y='quality', data=wines_df, color='r', ax=ax[7]);
sns.regplot(x='pH', y='quality', data=wines_df, color='g', ax=ax[8]);
sns.regplot(x='sulphates', y='quality', data=wines_df, color='b', ax=ax[9]);
sns.regplot(x='alcohol', y='quality', data=wines_df, color='r', ax=ax[10]);

"""Correlation Among the Data"""

correlation = wines_df.corr()

fig = plt.subplots(figsize=(13,13))
sns.heatmap(correlation,vmax=1,square=True,annot=True,cmap='Blues')

"""Testing with only One independent variable."""

for i in [ 'fixed acidity',	'volatile acidity','citric acid',	'residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide',	'density',	'pH','sulphates',	'alcohol']:
  x = np.array(wines_df[i])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  x_train=x_train.reshape(-1,1)
  x_test=x_test.reshape(-1,1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ",i," ",np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",i," ",accuracy_score(y_test,y_predict)*100)

"""Testing with Two variables"""

two_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(two_variables)-2+1): 
  x = np.array(wines_df[[two_variables[i],two_variables[i+1]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

three_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(three_variables)-3+1): 
  x = np.array(wines_df[[three_variables[i],three_variables[i+1],three_variables[i+2]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

four_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(four_variables)-4+1): 
  x = np.array(wines_df[[four_variables[i],four_variables[i+1],four_variables[i+2],four_variables[i+3]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

five_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(five_variables)-5+1): 
  x = np.array(wines_df[[five_variables[i],five_variables[i+1],five_variables[i+2],five_variables[i+3],five_variables[i+4]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

six_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(six_variables)-6+1): 
  x = np.array(wines_df[[six_variables[i],six_variables[i+1],six_variables[i+2],six_variables[i+3],six_variables[i+4],six_variables[i+5]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

seven_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(seven_variables)-7+1): 
  x = np.array(wines_df[[seven_variables[i],seven_variables[i+1],seven_variables[i+2],seven_variables[i+3],seven_variables[i+4],seven_variables[i+5],seven_variables[i+6]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

eight_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(eight_variables)-8+1): 
  x = np.array(wines_df[[eight_variables[i],eight_variables[i+1],eight_variables[i+2],eight_variables[i+3],eight_variables[i+4],eight_variables[i+5],eight_variables[i+6],eight_variables[i+7]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

nine_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(nine_variables)-9+1): 
  x = np.array(wines_df[[nine_variables[i],nine_variables[i+1],nine_variables[i+2],nine_variables[i+3],nine_variables[i+4],nine_variables[i+5],nine_variables[i+6],nine_variables[i+7],nine_variables[i+8]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

ten_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(ten_variables)-10+1): 
  x = np.array(wines_df[[ten_variables[i],ten_variables[i+1],ten_variables[i+2],ten_variables[i+3],ten_variables[i+4],ten_variables[i+5],ten_variables[i+6],ten_variables[i+7],ten_variables[i+8],ten_variables[i+9]]])
  y = np.array(wines_df['quality'])
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

eleven_variables= ['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']
for i in range(len(eleven_variables)-11+1): 
  x = wines_df[[eleven_variables[i],eleven_variables[i+1],eleven_variables[i+2],eleven_variables[i+3],eleven_variables[i+4],eleven_variables[i+5],eleven_variables[i+6],eleven_variables[i+7],eleven_variables[i+8],eleven_variables[i+9],eleven_variables[i+10]]]
  y = wines_df['quality']
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

# removing fixed acidity, density and citric acid we are checking whether the overall accuracy increases

try_parameters= ['volatile acidity','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','pH','sulphates','alcohol']
for i in range(len(try_parameters)-8+1): 
  x = wines_df[[try_parameters[i],try_parameters[i+1],try_parameters[i+2],try_parameters[i+3],try_parameters[i+4],try_parameters[i+5],try_parameters[i+6],try_parameters[i+7]]]
  y = wines_df['quality']
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

"""# Polynomial Regression"""

wines_df = pd.read_csv("/content/winequality-red_poly.csv")

# checking for null values
wines_df.isnull().sum()

# checking for duplicated values
wines_df.duplicated()

# removing duplicated values
wines_df=wines_df.drop_duplicates()
wines_df.duplicated()

# observing accuracy after cleaning the data

from sklearn.preprocessing import PolynomialFeatures
X = wines_df[['quality']]
y = wines_df[['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)
model = PolynomialFeatures(degree= 2)
y_ = model.fit_transform(y)
y_test_ = model.fit_transform(y_test)
lg = LinearRegression()
lg.fit(y_,X)
predicted_data = lg.predict(y_test_)
predicted_data = np.round_(predicted_data)
print("The root mean squared error is ", np.sqrt(mean_squared_error(X_test,predicted_data)))
print("accuracy of the model is ",accuracy_score(X_test,predicted_data)*100)

# Here density_2 is the square of the density and density_3 is the cube. No change in output

try_parameters= ['volatile acidity','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','pH','sulphates','alcohol','density_2','density_3']
for i in range(len(try_parameters)-10+1): 
  x = wines_df[[try_parameters[i],try_parameters[i+1],try_parameters[i+2],try_parameters[i+3],try_parameters[i+4],try_parameters[i+5],try_parameters[i+6],try_parameters[i+7],try_parameters[i+8],try_parameters[i+9]]]
  y = wines_df['quality']
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

# Here fixed_2 is the square of the fixed acidity. No change in output

try_parameters= ['volatile acidity','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','pH','sulphates','alcohol','fixed_2']
for i in range(len(try_parameters)-9+1): 
  x = wines_df[[try_parameters[i],try_parameters[i+1],try_parameters[i+2],try_parameters[i+3],try_parameters[i+4],try_parameters[i+5],try_parameters[i+6],try_parameters[i+7],try_parameters[i+8]]]
  y = wines_df['quality']
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

# Checking each squared column accuracy by polynomial
# Square

try_parameters= ['fixed_2','volatile_2','density_2','citric_2','residual_2','chlorides_2','free_2','total_2','pH_2','sulphates_2','alcohol_2']
for i in range(len(try_parameters)-1+1): 
  x = wines_df[[try_parameters[i]]]
  y = wines_df['quality']
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

# Including all squared columns of the data to perform polynomial regression(all columns accuracy)

square_parameters= ['fixed_2','volatile_2','density_2','citric_2','residual_2','chlorides_2','free_2','total_2','pH_2','sulphates_2','alcohol_2']
for i in range(len(square_parameters)-11+1): 
  x = wines_df[[square_parameters[i],square_parameters[i+1],square_parameters[i+2],square_parameters[i+3],square_parameters[i+4],square_parameters[i+5],square_parameters[i+6],square_parameters[i+7],square_parameters[i+8],square_parameters[i+9],square_parameters[i+10]]]
  y = wines_df['quality']
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

# Removing and considering some columns to check if there is any change in accuracy

random_parameters= ['fixed_2','volatile_2','citric_2','residual_2','chlorides_2','free_2','total sulfur dioxide','density_2','pH','sulphates','alcohol']
for i in range(len(random_parameters)-11+1): 
  x = wines_df[[random_parameters[i],random_parameters[i+1],random_parameters[i+2],random_parameters[i+3],random_parameters[i+4],random_parameters[i+5],random_parameters[i+6],random_parameters[i+7],random_parameters[i+8],random_parameters[i+9],random_parameters[i+10]]]
  y = wines_df['quality']
  
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=1)
  regression_model = LinearRegression()
  regression_model.fit(x_train, y_train)
  y_predict = regression_model.predict(x_test)
  y_predict = np.round(y_predict)
  print("The root mean squared error is ", np.sqrt(mean_squared_error(y_test,y_predict)))
  print("accuracy of the model is ",accuracy_score(y_test,y_predict)*100)

# observing accuracy without cleaning the data.

from sklearn.preprocessing import PolynomialFeatures
df = pd.read_csv('/content/winequality-red_poly.csv')
X = df[['quality']]
y = df[['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)
model = PolynomialFeatures(degree= 2)
y_ = model.fit_transform(y)
y_test_ = model.fit_transform(y_test)
lg = LinearRegression()
lg.fit(y_,X)
predicted_data = lg.predict(y_test_)
predicted_data = np.round_(predicted_data)
print("The root mean squared error is ", np.sqrt(mean_squared_error(X_test,predicted_data)))
print("accuracy of the model is ",accuracy_score(X_test,predicted_data)*100)